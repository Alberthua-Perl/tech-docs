DO285v3.9: 
	1. all name: RedHat OpenShift Container Platform
	2. v3.9 and v4.10:
		 cluster introduction: content and features
		 user authentication and authorization: RBAC and SCC
		 network field: ovs-subnet,ovs-multitenant,ovs-networkpolicy and OVN-kubernetes(4.6 or above)
		 application build and deploy: buildconfig,deploymentconfig and deployment
		 ocp specified: s2i(source-to-image)
		 storage: persistent volume(pv) and persistent volume claim(pvc)
		 operator: ocp v4 appeared(CRD+controller)
		 helm v3: ocp v4 appeared
		 helm v2: ocp v3.6 or above supported
		 kustomize: ocp v4 appeared
	3. DO180(container basic, chapter1~6) + DO280(openshift basic, chapter7~16) = DO285
	4. user and password:
		 foundationX:
		   kiosk: redhat
		   root: Asimov
		 other nodes:
			 student: student
			 root: redhat
	5. RedHat and Docker:
		 redhat use docker v1.13.x in ocp v3.x in default
		 redhat also use cri-o in ocp v3.11
		 * redhat has deprecated docker from ocp v4.x and use cri-o in ocp v4

OpenShift architecture:
	master node:
		api-server: 
			1. client: worker node openshift-node process including kubelet and kube-proxy
			2. client: etcd key-value database
			3. client: developer or operator(human)
			4. client: customized application call api-server
	  authentication:
			1. OAuth: http basic
			2. X509 CA certification
			3. OpenStack Keystone
			4. OpenLDAP,FreeIPA
		authoritation:
			1. ABRC: attribute-based access control
			2. RBAC: role-based access control(*), ocp v3.6 or above
		
Method of pulling images:
	1. Internet: RESTful API v1
		 docker search <image-pattern>
		 docker pull docker.io/library/alpine:latest
	2. Offline: RESTful API v2
		 docker-registry-cli registry.lab.example.com list all ssl
		 		 		 
Container registry:
	1. public registry:
		   online: docker.io, registry.access.redhat.com, quay.io, aliyun.com
			 offline: RedHat Quay, Harbor, registry(container image), docker-distribution(rpm)
  2. private registry:
			 online: docker.io, registry.access.redhat.com, quay.io, aliyun.com
			 offline: RedHat Quay, Harbor, registry(container image)
	* Difference: when you pull container images using username and password or not!

Container image layering:
	1. container image have several layers which can't be writeable!
	2. When container running loaded container image, container adds upper layer on basic image.

Customized container image:
	1. docker commit used in NO GA environment
	2. Dcokerfile: docker build, podman build
		 Containerfile: podman build
  3. S2I: source-to-image
		 basic image --> builder image --> application image(push into registry which is in ocp)
                           |
                       source code
  4. buildah

Dockerfile ADD and COPY:
	$ mkdir app-dockerfile
  $ cd app-dockerfile
  $ ls -lh
    app/
  $ vim Dockerfile
	  FROM rhscl/rhel7.5:latest
	  ADD ./app/ /opt/app
	  RUN chown -R app:app /opt/app && \
		    chmod -R 0775 /opt/app
	  WORKDIR /opt/app
	  USER app-runner
	  ENTRYPOINT ["./runapp", "para1", "para2"]

OpenShift network type:
  * following types in all openshift SDN!
	1. pod and node: pod attach ovs intergrated bridge(br0)
	2. pod and pod on the same node: 
		   * no network isolated: pod to pod indirectly
			 *network isolated: no allowed in default
	3. node and node: VXLAN tunnel(ovs or ovn-kubernetes) or Geneve(ovn-kubernetes)
	4. pod and pod on different node:
			 * pod to pod directly: depand on tunnel
			 * pod to pod indirectly: depand on service and tunnel
	5. pod and service: iptables NAT rules, service works as iptables rules
	6. service and external:
			 * NodePort type service 
			 * LoadBalance type service
			 * exposed service to route

Service resource functions:
	1. apply fixed ip address allow packets proxy to pods
	2. load balance packets to pods

Analyze sdn-multitenant:
	from project: sdn-multitenant project
		pod: httpd-debian, 10.128.0.13 (VNID:0xe9cd1d->reg0)
	to project: smoke-test project
		pod: hello, 10.128.0.12 (VNID:0x8a84cd->reg1)

External packets into ocp cluster:
	* using NodePort Service: 
		student@workstation:
			external request -> [master -> PREROUTING -> KUBE-SERVICES -> KUBE-NODEPORT -> 
			KUBE-SVC-KFF2GHTQXTTRUCUG(dpt:30800) -> 172.30.142.91:8080 -> KUBE-SEP-OP2GFVQMP7QGRMAP -> 
			DNAT -> tcp to:10.130.0.23:8080 -> ROUTE -> tun0] -> OVS br0 OpenFlow rules -> vxlan0 ->
			eth0 -> node2

	* Note:
		Kubernetes service model:
			1. userspace: deprecated
			2. iptables: common
			3. ipvs(+iptables POSTROUTING): current

